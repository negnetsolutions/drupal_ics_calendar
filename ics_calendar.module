<?php
/**
* @file
* This module shows the sets and photo's from a Flickr account
*/

function ics_calendar_get_config($delta = NULL) {
  $config = array(
    'delta'       => $delta,
    'ics_calendar_ics'   => '',
    'ics_calendar_cache_timeout' => 0,
    'ics_admin_title' => '',
    'ics_type'       => 'month',
  );

  // Get the block configuration options.
  if ($delta) {
    static $blocks;
    if (!isset($blocks)) {
      $blocks = module_invoke_all('ics_calendar_blocks');
    }
    if (!empty($blocks[$delta])) {
      // Merge the default values.
      $config = $blocks[$delta] + $config;
      // Set the delta.
      $config['delta'] = $delta;
      // Flag the block as exported.
      $config['exported_to_code'] = TRUE;
    }

    $config['ics_calendar_ics']  = variable_get("ics_calendar_block_{$delta}_calendar_ics",  $config['ics_calendar_ics']);
    $config['ics_calendar_cache_timeout'] = variable_get("ics_calendar_block_{$delta}_cache_timeout", $config['ics_calendar_cache_timeout']);
    $config['ics_admin_title'] = variable_get("ics_calendar_block_{$delta}_ics_admin_title", $config['ics_admin_title']);
    $config['ics_type'] = variable_get("ics_calendar_block_{$delta}_ics_type", $config['ics_type']);
  }


  return $config;
}

/**
* Implementation of hook_help()
*/
function ics_calendar_help($path, $arg) {
  if ($path == 'admin/help#ics_calendar') {
    return '<p>' . t('This module reads a public ics file and builds various calendar blocks from the data.') . '</p>';
  }
}

function _ics_calendar_load_libaries()
{
  if( _ics_calendar_check_libaries() ) {
    require_once libraries_get_path('SG-iCalendar') . "/SG_iCal.php";
    require_once drupal_get_path('module', 'ics_calendar') . "/ics_calendar.data_parser.class.php";
    return true;
  }

  return false;
}
function _ics_calendar_check_libaries()
{
  $library_path = libraries_get_path('SG-iCalendar');
  if( file_exists($library_path.'/SG_iCal.php') ) {
    return true;
  }
  else {
    if (user_access('administer flickr settings')) {
      drupal_set_message(t('You need to download and place SG-iCalendar inside sites/all/libraries/SG-iCalendar:') . ' ' . l(t('https://github.com/fangel/SG-iCalendar'), 'https://github.com/fangel/SG-iCalendar'), 'error');
    }
    return FALSE;
  }
}

/**
* Implementation of hook_permission()
*/
function ics_calendar_permission() {
  return array(
    'administer ics calendar settings' => array(
      'title' => t('Administer ICS Calendar Settings'), 
      'description' => t('Administer the settings for ICS Calendar'),
    ),
  );
}

/**
* Implementation of hook_menu()
*/
function ics_calendar_menu() {
  $items = array();
  
  if (module_exists('block')) {
    $items['admin/config/media/ics_calendar/add-calendar-block'] = array(
      'title' => 'Add ICS Calendar block',
      'description' => 'Add a new ICS Calendar block.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ics_calendar_add_calendar_block_form'),
      'access arguments' => array('administer blocks'),
      'type' => MENU_LOCAL_ACTION,
      'file' => 'ics_calendar.admin.inc',
    );
    foreach (list_themes() as $key => $theme) {
      $items['admin/structure/block/list/' . $key . '/add-calendar-block'] = array(
        'title' => 'Add ICS Calendar block',
        'description' => 'Add a new ICS Calendar block.',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('ics_calendar_add_calendar_block_form'),
        'access arguments' => array('administer blocks'),
        'type' => MENU_LOCAL_ACTION,
        'file' => 'ics_calendar.admin.inc',
      );
    }
    $items['admin/config/media/ics_calendar/delete-calendar-block'] = array(
      'title' => 'Delete ICS Calendar block',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('ics_calendar_delete'),
      'access arguments' => array('administer blocks'),
      'type' => MENU_CALLBACK,
      'file' => 'ics_calendar.admin.inc',
    );
  }

  $items['admin/config/media/ics_calendar'] = array(
    'title' => 'ICS Calendar Settings',
    'description' => 'Configure options for the ICS Calendar module',
    'page callback' => 'ics_calendar_admin_settings',
    'access arguments' => array('administer ics calendar settings'),
    'file' => 'ics_calendar.admin.inc',
  );
  return $items;
}

function ics_calendar_admin_settings() {
  return drupal_get_form('ics_calendar_settings_form');
}

function ics_calendar_block_info() {
  module_load_include('inc', 'ics_calendar', 'ics_calendar.admin');
  return _ics_calendar_block_info();
}
// function ics_calendar_block_info()
// {
//   $blocks['ics_calendar_upcoming_events'] = array(
//     'info' => t('ICS Calendar Upcoming Events'),
//     'cache' => DRUPAL_CACHE_PER_ROLE
//   );
// 
//   $blocks['ics_calendar_event_calendar'] = array(
//     'info' => t('ICS Calendar Event Calendar'),
//     'cache' => DRUPAL_CACHE_PER_ROLE
//   );
// 
// 
//   return $blocks;
// }

/**
 * Implements hook_block_view().
 */
function ics_calendar_block_view($delta = '') {
  $config = ics_calendar_get_config($delta);
  $block = null;

  switch ($config['ics_type']) {
    case 'month':
      $block['content'] = theme('ics_calendar_month_calendar_wrapper', array('feed'=>$config['ics_calendar_ics'], 'timeout'=>$config['ics_calendar_cache_timeout']));
      break;
    case 'week':
      $block['content'] = theme('ics_calendar_week_calendar_wrapper', array('feed'=>$config['ics_calendar_ics'], 'timeout'=>$config['ics_calendar_cache_timeout']));
      break;
    case 'upcoming':
      $block['content'] = theme('ics_calendar_upcoming_events_wrapper', array('feed'=>$config['ics_calendar_ics'], 'timeout'=>$config['ics_calendar_cache_timeout']));
      break;

  };

  return $block;
}

/**
* Implementation of hook_theme()
*/
function ics_calendar_theme($existing, $type, $theme, $path) {
  return array(
    'ics_calendar_upcoming_events_wrapper' => array('feed'=>null, 'timeout'=>null),
    'ics_calendar_month_calendar_wrapper' => array('feed'=>null, 'timeout'=>null),
    'ics_calendar_week_calendar_wrapper' => array('feed'=>null, 'timeout'=>null),
    'ics_calendar_list' => array(
      'variables' => array('days' => NULL),
      'template' => 'ics_calendar_list'
    ),
    'ics_calendar_calendar' => array(
      'variables' => array('month' => NULL, 'year' => NULL, 'events' => NULL),
      'template' => 'ics_calendar_calendar'
    ),
    'ics_calendar_calendar_weekly' => array(
      'variables' => array('week' => NULL, 'year' => NULL, 'events' => NULL),
      'template' => 'ics_calendar_calendar_weekly'
    ),
  );
}
function ics_calendar_upcoming_events_wrapper($variables)
{
  return theme('ics_calendar_upcoming_events_wrapper', array($variables));
}
function ics_calendar_month_calendar_wrapper($variables)
{
  return theme('theme_ics_calendar_month_calendar_wrapper', array($variables));
}
function ics_calendar_week_calendar_wrapper($variables)
{
  return theme('theme_ics_calendar_week_calendar_wrapper', array($variables));
}
function theme_ics_calendar_week_calendar_wrapper($variables) {

  if( !_ics_calendar_load_libaries() ) {
    return t('There is no data available at this time.');
  }

  drupal_add_css(drupal_get_path('module', 'ics_calendar') . '/ics_calendar.css', array('type'=>'file', 'media'=>'screen'));
  drupal_add_css(drupal_get_path('module', 'ics_calendar') . '/ics_calendar_print.css', array('type'=>'file', 'media'=>'print'));
  drupal_add_js(drupal_get_path('module','ics_calendar').'/ics_calendar.js');

  $ics_feed = ($variables['feed'] != null) ? $variables['feed'] : variable_get('ics_calendar_defaultics', NULL);
  $timeout = ($variables['timeout'] != null) ? $variables['timeout'] : variable_get('ics_calendar_cache_timeout', NULL);

  if( ($ics_file = ics_calendar_get_ics_from_cache($ics_feed, $timeout) ) == false ) {
    return t('There is no data available at this time.');
  }

  $week = date('W',time());
  $year = date('Y',time());

  //set month
  if(isset($_GET['week'])) {

    $data = explode('-',$_GET['week']);

    if( isset($data[0]) && strlen($data[0]) == 4 && is_numeric($data[0]) ) {
      $year = $data[0];
    }
    if( isset($data[1]) && strlen($data[1]) == 2 && is_numeric($data[1]) ) {
      $week = $data[1];
    }
  }

  $parser = new ical_data_parser($ics_file);
  $events = $parser->getDataByWeek($week,$year);

  if( count($events) == 0 )
    return t('There is no data available at this time.');

  return theme('ics_calendar_calendar_weekly', array('week'=>$week, 'year'=>$year, 'events'=>$events));
}
function theme_ics_calendar_month_calendar_wrapper($variables) {

  if( !_ics_calendar_load_libaries() ) {
    return t('There is no data available at this time.');
  }

  drupal_add_css(drupal_get_path('module', 'ics_calendar') . '/ics_calendar.css', array('type'=>'file', 'media'=>'screen'));
  drupal_add_css(drupal_get_path('module', 'ics_calendar') . '/ics_calendar_print.css', array('type'=>'file', 'media'=>'print'));
  drupal_add_js(drupal_get_path('module','ics_calendar').'/ics_calendar.js');

  $ics_feed = ($variables['feed'] != null) ? $variables['feed'] : variable_get('ics_calendar_defaultics', NULL);
  $timeout = ($variables['timeout'] != null) ? $variables['timeout'] : variable_get('ics_calendar_cache_timeout', NULL);

  if( ($ics_file = ics_calendar_get_ics_from_cache($ics_feed, $timeout) ) == false ) {
    return t('There is no data available at this time.');
  }

  $month = date('n',time());
  $year = date('Y',time());

  //set month
  if(isset($_GET['month'])) {

    $data = explode('-',$_GET['month']);

    if( isset($data[0]) && strlen($data[0]) == 4 && is_numeric($data[0]) ) {
      $year = $data[0];
    }
    if( isset($data[1]) && strlen($data[1]) == 2 && is_numeric($data[1]) ) {
      $month = $data[1];
    }
  }

  $parser = new ical_data_parser($ics_file);
  $events = $parser->getDataByMonth($month,$year);

  if( count($events) == 0 )
    return t('There is no data available at this time.');


  return theme('ics_calendar_calendar', array('month'=>$month, 'year'=>$year, 'events'=>$events));
}
function theme_ics_calendar_upcoming_events_wrapper($variables)
{
  if( !_ics_calendar_load_libaries() ) {
    return t('There is no data available at this time.');
  }

  drupal_add_css(drupal_get_path('module', 'ics_calendar') . '/ics_calendar.css');

  $ics_feed = ($variables['feed'] != null) ? $variables['feed'] : variable_get('ics_calendar_defaultics', NULL);
  $timeout = ($variables['timeout'] != null) ? $variables['timeout'] : variable_get('ics_calendar_cache_timeout', NULL);

  if( ($ics_file = ics_calendar_get_ics_from_cache($ics_feed, $timeout) ) == false ) {
    return t('There is no data available at this time.');
  }

  $parser = new ical_data_parser($ics_file);
  $days = $parser->getDataByDays('now', 7);

  return theme('ics_calendar_list', array('days'=>$days));
}

function ics_calendar_print_duration($start, $end)
{
  $chunks = array(
    array(60 * 60 * 24 * 365 , 'year'),
    array(60 * 60 * 24 * 30 , 'month'),
    array(60 * 60 * 24 * 7, 'week'),
    array(60 * 60 * 24 , 'day'),
    array(60 * 60 , 'hour'),
    array(60 , 'minute'),
    array(1 , 'second')
  );

  $since = $end - $start;

  for ($i = 0, $j = count($chunks); $i < $j; $i++) {
    $seconds = $chunks[$i][0];
    $name = $chunks[$i][1];
    if (($count = floor($since / $seconds)) != 0) {
      break;
    }
  }

  return ($count == 1) ? '1 '.$name : "$count {$name}s";
}
function ics_calendar_print_description($description)
{
  return str_replace("\n","<br />\n", $description);
}
function ics_calendar_print_event_time($start, $end)
{
  $date = date('g:i', $start);

  if( date('a', $start) == 'am') {
    $pm = 'a';
  }
  else {
    $pm = 'p';
  }
  $output = $date.$pm;

  $date = date('g:i',$end);
  if( date('a', $end) == 'am') {
    $pm = 'a';
  }
  else {
    $pm = 'p';
  }

  return $output . '<span> - '.$date.$pm.'</span>';
  
}
function ics_calendar_get_cache_folder()
{
  // Get the path to the cache dir
  $path = drupal_realpath(variable_get('ics_calendar_cach_dir', 'public://icalparser_cache'));

  // Check if the dir exists and is writable
  if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
    if (!file_prepare_directory($path, FILE_CREATE_DIRECTORY)) {
      // Dir doesn't exist or isn't writable, put message in watchdog
      watchdog('ics_calendar', 'The cache directory for iCal Parser could not be created or is not accessible.', array(), WATCHDOG_ERROR);
    }
  }

  return $path;
}
function ics_calendar_get_ics_from_cache($url, $timeout)
{
  $path = ics_calendar_get_cache_folder();

  $hits = array();

  //get cache file list
  $cache = scandir($path);
  foreach( $cache as $file ) {
    if( strpos($file, ics_calendar_get_cache_identifier($url)) !== false ) {

      //check to see if the file is out of date
      if( (time() - substr(strstr($file,'.'), 1)) >= $timeout ) {
        //file is out of date and needs to be pruned
        unlink($path.'/'.$file);
      }
      else if (strstr($file,'cached_') === false) {
        $hits[] = $file;
      }
    }
  }

  if( count($hits) > 0 ) {
    //return file from cache
    return $path.'/'.end($hits);
  }
  else {
    //need to redownload file
    if ( ($file = ics_calendar_download_file($url)) != false ) {
      return $path.'/'.$file;
    }
  }
  return false;
}
function ics_calendar_download_file($url)
{
  if( ($data = file_get_contents($url)) == false ) {
    if (user_access('administer flickr settings')) {
      drupal_set_message(t('Could not read ics feed at: '.$url), 'error');
    }
    return false;
  }

  $filename = ics_calendar_get_cache_identifier($url).'.'.time();

  if( (file_put_contents(ics_calendar_get_cache_folder().'/'.$filename,$data)) == false ) {
    watchdog('ics_calendar', 'The cache directory for ICS Calendar could not be writtem.', array(), WATCHDOG_ERROR);
  }

  return $filename;
}
function ics_calendar_get_cache_identifier($url)
{
  return md5($url);
}

/**
 * Ensure the cache is flushed whenever hook_flush_caches is invoked.
 */
function ics_calendar_flush_caches() {
  // Do not actually flush caches if running on cron. Drupal uses this hook
  // in an inconsistent fashion and it does not necessarily mean to *flush*
  // caches when running from cron. Instead it's just getting a list of cache
  // tables and may not do any flushing.
  if (!empty($GLOBALS['locks']['cron'])) {
    return;
  }

  ics_calendar_dir_flush_caches();

}

/*
 * Function to clean up all the cached files.
 */
function ics_calendar_dir_flush_caches() {
  file_unmanaged_delete_recursive(variable_get('ics_calendar_cach_dir', NULL));
}
